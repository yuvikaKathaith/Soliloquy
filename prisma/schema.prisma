// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String      @id @default(cuid())
  clerkUserId   String      @unique
  email         String      @unique
  name          String?    
  imageUrl      String?    
  collections   Collection[]
  entries       Entry[]
  currentDraft  Draft?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Collection{
  id            String      @id @default(cuid())
  name          String 
  description   String?  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade) //whenever a user gets deleted the collections get deleted too
  userId        String
  entries       Entry[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([name, userId])  //each user must have collections with different name, so a collection name and a user cannot stay together 
}
model Entry {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text //it allows us to add more data in our dB
  mood          String
  moodeScore    Int
  moodImageUrl  String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String 
  collection    Collection?  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
model Draft {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text 
  mood          String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @unique //one draft per user
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}